// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target x86_64-apple-macos13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name NotifKit
import AppKit
@_exported import NotifKit
import OSLog
import Swift
import SwiftUI
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public struct NKTipPresentationData {
  public var text: Swift.String
  public var symbol: Swift.String
  public init(text: Foundation.LocalizedStringResource, symbol: Swift.String)
  @_disfavoredOverload public init(text: Swift.String, symbol: Swift.String)
}
public struct NKTipper {
  @available(watchOS, unavailable)
  @available(macOS, unavailable)
  public static let tinyStyle: NotifKit.NKTipper
  @available(watchOS, unavailable)
  public static let largeStyle: NotifKit.NKTipper
  public static var automaticStyle: NotifKit.NKTipper {
    get
  }
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  public init<AppearenceBackground>(_ appearance: NotifKit.NKTipAppearence<AppearenceBackground>) where AppearenceBackground : NotifKit._NKBackground
  @available(iOS, unavailable)
  @available(macOS, unavailable)
  public init(transition: SwiftUICore.AnyTransition, @SwiftUICore.ViewBuilder customView: @escaping (NotifKit.NKTipPresentationData) -> some View)
  @available(watchOS, unavailable)
  public init(style: NotifKit.NKTipper.TipPresentationStyle)
  public func present(text: Foundation.LocalizedStringResource, symbol: Swift.String, duration: Foundation.TimeInterval = 3.0)
  @_disfavoredOverload public func present(text: Swift.String, symbol: Swift.String, duration: Foundation.TimeInterval = 3.0)
  public func present(_ data: NotifKit.NKTipPresentationData, duration: Foundation.TimeInterval = 3.0)
  public enum TipPresentationStyle {
    @available(macOS, unavailable)
    case tiny
    case large
    public static func == (a: NotifKit.NKTipper.TipPresentationStyle, b: NotifKit.NKTipper.TipPresentationStyle) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(iOS, unavailable)
@available(macOS, unavailable)
public struct NKTipAppearence<Background> where Background : NotifKit._NKBackground {
}
public protocol _NKBackground {
  func _addBackground(@SwiftUICore.ViewBuilder to view: () -> some View) -> SwiftUICore.AnyView
}
@available(watchOS 10.0, *)
public struct NKMaterialBackground : NotifKit._NKBackground {
  public let material: SwiftUICore.Material
  public let cornerRadius: CoreFoundation.CGFloat
  public init(material: SwiftUICore.Material, cornerRadius: CoreFoundation.CGFloat = 14)
}
public struct NKCompatibleMaterialBackground : NotifKit._NKBackground {
  public let material: NotifKit.NKCompatibleMaterialBackground.CompatibleMaterial
  public let cornerRadius: CoreFoundation.CGFloat
  public init(material: NotifKit.NKCompatibleMaterialBackground.CompatibleMaterial, cornerRadius: CoreFoundation.CGFloat = 14)
  public enum CompatibleMaterial : Swift.Sendable {
    case regular
    case thick
    case thin
    case ultraThin
    case ultraThick
    public static func == (a: NotifKit.NKCompatibleMaterialBackground.CompatibleMaterial, b: NotifKit.NKCompatibleMaterialBackground.CompatibleMaterial) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public struct NKShapeBackground<ShapeType> : NotifKit._NKBackground where ShapeType : SwiftUICore.Shape {
  public init(shape: ShapeType)
}
extension NotifKit.NKTipper.TipPresentationStyle : Swift.Equatable {}
extension NotifKit.NKTipper.TipPresentationStyle : Swift.Hashable {}
extension NotifKit.NKCompatibleMaterialBackground.CompatibleMaterial : Swift.Equatable {}
extension NotifKit.NKCompatibleMaterialBackground.CompatibleMaterial : Swift.Hashable {}
